# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.


version: '3'
x-airflow-common:
  &airflow-common
  build: ${AIRFLOW_DOCKERFILE:-../docker/airflow}
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${PG_USER}:${PG_PASSWORD}@airflow_db/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${PG_USER}:${PG_PASSWORD}@airflow_db/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ""
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "false"
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    AIRFLOW__API__AUTH_BACKENDS: "airflow.api.auth.backend.basic_auth"
    AIRFLOW__WEBSERVER__ENABLE_PROXY_FIX: "true"
    AIRFLOW_VAR_AIRFLOW_BUCKET: "${AIRFLOW_BUCKET}"
    AIRFLOW_VAR_DATASETS_BUCKET: "${DATASETS_BUCKET}"
    AIRFLOW_VAR_SAVED_MODELS_BUCKET: "${SAVED_MODELS_BUCKET}"
    AIRFLOW_VAR_EVALUATION_RESULTS_BUCKET: "${EVALUATION_RESULTS_BUCKET}"
    AIRFLOW_VAR_MLFLOW_HOST: "tracking-server"
    AIRFLOW_VAR_MLFLOW_TRACKING_PORT: 5000
    AIRFLOW_VAR_TENSORBOARD_BUCKET: "${TENSORBOARD_BUCKET}"
    AIRFLOW_VAR_REVERSE_PROXY_HOST: "${REVERSE_PROXY_HOST}"
    AIRFLOW_VAR_REVERSE_PROXY_S3_PORT: "${MINIO_PORT}"
    AIRFLOW_CONN_S3: "s3:///?aws_access_key_id=${MINIO_ACCESS_KEY}&aws_secret_access_key=${MINIO_SECRET_ACCESS_KEY}&host=http://s3:9000"
    TRAIN_ON_GPU: "${TRAIN_ON_GPU}"
  volumes:
    - ${AIRFLOW_DAGS:-./dags}:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - /var/run/docker.sock:/var/run/docker.sock
    - /tmp:/tmp  # https://github.com/apache/airflow/issues/16803
  user: "${AIRFLOW_UID:-50000}:0"
  group_add:
    - ${DOCKER_GID}
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    airflow_db:
      condition: service_healthy

services:
  airflow_db:
    restart: always
    image: postgres:13
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: airflow
    volumes:
      - airflow-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "airflow", "-U", "${PG_USER}", "-h", "localhost"]
      interval: 5s
      retries: 5

  redis:
    restart: always
    image: redis:latest
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50

  airflow-webserver:
    <<: *airflow-common
    restart: always
    command: webserver
    expose:
      - "8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    restart: always
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    restart: always
    command: celery worker
    healthcheck:
      test:
      - "CMD-SHELL"
      - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    restart: always
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
          echo
          exit 1
        fi
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: "true"
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_USERNAME: ${AIRFLOW_USER}
      _AIRFLOW_WWW_USER_PASSWORD: ${AIRFLOW_PASSWORD}
    user: "0:0"
    volumes:
      - .:/sources

  flower:
    <<: *airflow-common
    restart: always
    command: celery flower
    expose:
      - "5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  s3:
    restart: always
    image: minio/minio:RELEASE.2020-12-18T03-27-42Z
    volumes:
      - minio-data:/data
    expose:
      - "9000"
    environment:
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_ACCESS_KEY}
    command: server /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  create-buckets:
    image: minio/mc:RELEASE.2019-07-17T22-13-42Z
    depends_on:
      s3:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c '
      /usr/bin/mc config host add s3 http://s3:9000 ${MINIO_ACCESS_KEY} ${MINIO_SECRET_ACCESS_KEY} --api S3v4;
      [[ ! -z "`/usr/bin/mc ls s3 | grep mlflow`" ]] || /usr/bin/mc mb s3/mlflow;
      /usr/bin/mc policy download s3/mlflow;
      [[ ! -z "`/usr/bin/mc ls s3 | grep ${SAVED_MODELS_BUCKET}`" ]] || /usr/bin/mc mb s3/${SAVED_MODELS_BUCKET};
      [[ ! -z "`/usr/bin/mc ls s3 | grep ${DATASETS_BUCKET}`" ]] || /usr/bin/mc mb s3/${DATASETS_BUCKET};
      [[ ! -z "`/usr/bin/mc ls s3 | grep ${EVALUATION_RESULTS_BUCKET}`" ]] || /usr/bin/mc mb s3/${EVALUATION_RESULTS_BUCKET};
      /usr/bin/mc policy download s3/${EVALUATION_RESULTS_BUCKET};
      [[ ! -z "`/usr/bin/mc ls s3 | grep ${AIRFLOW_BUCKET}`" ]] || /usr/bin/mc mb s3/${AIRFLOW_BUCKET};
      [[ ! -z "`/usr/bin/mc ls s3 | grep ${TENSORBOARD_BUCKET}`" ]] || /usr/bin/mc mb s3/${TENSORBOARD_BUCKET};
      exit 0;
      '

  mlflow-db:
    restart: always
    image: postgres:13
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: mlflow
    volumes:
      - mlflow-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "mlflow", "-U", "${PG_USER}", "-h", "localhost"]
      interval: 5s
      retries: 5

  tracking-server:
    restart: always
    build: ${MLFLOW_DOCKERFILE:-../docker/mlflow}
    expose:
      - "5000"
    environment:
      - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY}
      - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_ACCESS_KEY}
      - MLFLOW_S3_ENDPOINT_URL=http://s3:9000
    command: >
      mlflow server
      --backend-store-uri postgresql+psycopg2://${PG_USER}:${PG_PASSWORD}@mlflow-db:5432/mlflow
      --host 0.0.0.0
      --default-artifact-root s3://mlflow/

  tensorboard:
    restart: always
    build: ${TENSORBOARD_DOCKERFILE:-../docker/tensorboard}
    expose:
      - "6006"
    depends_on:
      s3:
        condition: service_healthy
    environment:
      - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY}
      - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_ACCESS_KEY}
      - S3_ENDPOINT=http://s3:9000
      - S3_VERIFY_SSL=0
      - S3_USE_HTTPS=0
    command:
      --logdir s3://${TENSORBOARD_BUCKET}/logs --host 0.0.0.0

  nginx:
    restart: always
    image: nginx:1.21
    ports:
      - "${MINIO_PORT}:9000"
      - "${MLFLOW_PORT}:5000"
      - "${AIRFLOW_PORT}:8080"
      - "${TENSORBOARD_PORT}:6006"
    environment:
      - MINIO_PORT=${MINIO_PORT}
      - MLFLOW_PORT=${MLFLOW_PORT}
      - AIRFLOW_PORT=${AIRFLOW_PORT}
      - TENSORBOARD_PORT=${TENSORBOARD_PORT}
    depends_on:
      - tracking-server
      - s3
      - airflow-webserver
      - tensorboard
    volumes:
    - ${NGINX_CONF:-./nginx.conf}:/etc/nginx/nginx.conf

volumes:
  airflow-db-volume:
  mlflow-db-volume:
  minio-data:

networks:
  default:
    name: airflow-network
